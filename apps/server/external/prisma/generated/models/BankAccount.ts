
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BankAccount` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BankAccount
 * 
 */
export type BankAccountModel = runtime.Types.Result.DefaultSelection<Prisma.$BankAccountPayload>

export type AggregateBankAccount = {
  _count: BankAccountCountAggregateOutputType | null
  _min: BankAccountMinAggregateOutputType | null
  _max: BankAccountMaxAggregateOutputType | null
}

export type BankAccountMinAggregateOutputType = {
  id: string | null
  userId: string | null
  banco: string | null
  agencia: string | null
  conta: string | null
  digito: string | null
  tipo: $Enums.AccountType | null
  tipoPessoa: $Enums.PersonType | null
  titular: string | null
  cpfCnpj: string | null
  ativa: boolean | null
  validada: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BankAccountMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  banco: string | null
  agencia: string | null
  conta: string | null
  digito: string | null
  tipo: $Enums.AccountType | null
  tipoPessoa: $Enums.PersonType | null
  titular: string | null
  cpfCnpj: string | null
  ativa: boolean | null
  validada: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BankAccountCountAggregateOutputType = {
  id: number
  userId: number
  banco: number
  agencia: number
  conta: number
  digito: number
  tipo: number
  tipoPessoa: number
  titular: number
  cpfCnpj: number
  ativa: number
  validada: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BankAccountMinAggregateInputType = {
  id?: true
  userId?: true
  banco?: true
  agencia?: true
  conta?: true
  digito?: true
  tipo?: true
  tipoPessoa?: true
  titular?: true
  cpfCnpj?: true
  ativa?: true
  validada?: true
  createdAt?: true
  updatedAt?: true
}

export type BankAccountMaxAggregateInputType = {
  id?: true
  userId?: true
  banco?: true
  agencia?: true
  conta?: true
  digito?: true
  tipo?: true
  tipoPessoa?: true
  titular?: true
  cpfCnpj?: true
  ativa?: true
  validada?: true
  createdAt?: true
  updatedAt?: true
}

export type BankAccountCountAggregateInputType = {
  id?: true
  userId?: true
  banco?: true
  agencia?: true
  conta?: true
  digito?: true
  tipo?: true
  tipoPessoa?: true
  titular?: true
  cpfCnpj?: true
  ativa?: true
  validada?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BankAccountAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankAccount to aggregate.
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankAccounts to fetch.
   */
  orderBy?: Prisma.BankAccountOrderByWithRelationInput | Prisma.BankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BankAccounts
  **/
  _count?: true | BankAccountCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BankAccountMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BankAccountMaxAggregateInputType
}

export type GetBankAccountAggregateType<T extends BankAccountAggregateArgs> = {
      [P in keyof T & keyof AggregateBankAccount]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBankAccount[P]>
    : Prisma.GetScalarType<T[P], AggregateBankAccount[P]>
}




export type BankAccountGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BankAccountWhereInput
  orderBy?: Prisma.BankAccountOrderByWithAggregationInput | Prisma.BankAccountOrderByWithAggregationInput[]
  by: Prisma.BankAccountScalarFieldEnum[] | Prisma.BankAccountScalarFieldEnum
  having?: Prisma.BankAccountScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BankAccountCountAggregateInputType | true
  _min?: BankAccountMinAggregateInputType
  _max?: BankAccountMaxAggregateInputType
}

export type BankAccountGroupByOutputType = {
  id: string
  userId: string
  banco: string
  agencia: string
  conta: string
  digito: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa: boolean
  validada: boolean
  createdAt: Date
  updatedAt: Date
  _count: BankAccountCountAggregateOutputType | null
  _min: BankAccountMinAggregateOutputType | null
  _max: BankAccountMaxAggregateOutputType | null
}

type GetBankAccountGroupByPayload<T extends BankAccountGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BankAccountGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BankAccountGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BankAccountGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BankAccountGroupByOutputType[P]>
      }
    >
  >



export type BankAccountWhereInput = {
  AND?: Prisma.BankAccountWhereInput | Prisma.BankAccountWhereInput[]
  OR?: Prisma.BankAccountWhereInput[]
  NOT?: Prisma.BankAccountWhereInput | Prisma.BankAccountWhereInput[]
  id?: Prisma.StringFilter<"BankAccount"> | string
  userId?: Prisma.StringFilter<"BankAccount"> | string
  banco?: Prisma.StringFilter<"BankAccount"> | string
  agencia?: Prisma.StringFilter<"BankAccount"> | string
  conta?: Prisma.StringFilter<"BankAccount"> | string
  digito?: Prisma.StringNullableFilter<"BankAccount"> | string | null
  tipo?: Prisma.EnumAccountTypeFilter<"BankAccount"> | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFilter<"BankAccount"> | $Enums.PersonType
  titular?: Prisma.StringFilter<"BankAccount"> | string
  cpfCnpj?: Prisma.StringFilter<"BankAccount"> | string
  ativa?: Prisma.BoolFilter<"BankAccount"> | boolean
  validada?: Prisma.BoolFilter<"BankAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  pixTransactions?: Prisma.PixTransactionListRelationFilter
}

export type BankAccountOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  banco?: Prisma.SortOrder
  agencia?: Prisma.SortOrder
  conta?: Prisma.SortOrder
  digito?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  tipoPessoa?: Prisma.SortOrder
  titular?: Prisma.SortOrder
  cpfCnpj?: Prisma.SortOrder
  ativa?: Prisma.SortOrder
  validada?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  pixTransactions?: Prisma.PixTransactionOrderByRelationAggregateInput
}

export type BankAccountWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  banco_agencia_conta_cpfCnpj?: Prisma.BankAccountBancoAgenciaContaCpfCnpjCompoundUniqueInput
  AND?: Prisma.BankAccountWhereInput | Prisma.BankAccountWhereInput[]
  OR?: Prisma.BankAccountWhereInput[]
  NOT?: Prisma.BankAccountWhereInput | Prisma.BankAccountWhereInput[]
  userId?: Prisma.StringFilter<"BankAccount"> | string
  banco?: Prisma.StringFilter<"BankAccount"> | string
  agencia?: Prisma.StringFilter<"BankAccount"> | string
  conta?: Prisma.StringFilter<"BankAccount"> | string
  digito?: Prisma.StringNullableFilter<"BankAccount"> | string | null
  tipo?: Prisma.EnumAccountTypeFilter<"BankAccount"> | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFilter<"BankAccount"> | $Enums.PersonType
  titular?: Prisma.StringFilter<"BankAccount"> | string
  cpfCnpj?: Prisma.StringFilter<"BankAccount"> | string
  ativa?: Prisma.BoolFilter<"BankAccount"> | boolean
  validada?: Prisma.BoolFilter<"BankAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  pixTransactions?: Prisma.PixTransactionListRelationFilter
}, "id" | "banco_agencia_conta_cpfCnpj">

export type BankAccountOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  banco?: Prisma.SortOrder
  agencia?: Prisma.SortOrder
  conta?: Prisma.SortOrder
  digito?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  tipoPessoa?: Prisma.SortOrder
  titular?: Prisma.SortOrder
  cpfCnpj?: Prisma.SortOrder
  ativa?: Prisma.SortOrder
  validada?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BankAccountCountOrderByAggregateInput
  _max?: Prisma.BankAccountMaxOrderByAggregateInput
  _min?: Prisma.BankAccountMinOrderByAggregateInput
}

export type BankAccountScalarWhereWithAggregatesInput = {
  AND?: Prisma.BankAccountScalarWhereWithAggregatesInput | Prisma.BankAccountScalarWhereWithAggregatesInput[]
  OR?: Prisma.BankAccountScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BankAccountScalarWhereWithAggregatesInput | Prisma.BankAccountScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  userId?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  banco?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  agencia?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  conta?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  digito?: Prisma.StringNullableWithAggregatesFilter<"BankAccount"> | string | null
  tipo?: Prisma.EnumAccountTypeWithAggregatesFilter<"BankAccount"> | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeWithAggregatesFilter<"BankAccount"> | $Enums.PersonType
  titular?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  cpfCnpj?: Prisma.StringWithAggregatesFilter<"BankAccount"> | string
  ativa?: Prisma.BoolWithAggregatesFilter<"BankAccount"> | boolean
  validada?: Prisma.BoolWithAggregatesFilter<"BankAccount"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BankAccount"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BankAccount"> | Date | string
}

export type BankAccountCreateInput = {
  id?: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBankAccountsInput
  pixTransactions?: Prisma.PixTransactionCreateNestedManyWithoutBankAccountInput
}

export type BankAccountUncheckedCreateInput = {
  id?: string
  userId: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  pixTransactions?: Prisma.PixTransactionUncheckedCreateNestedManyWithoutBankAccountInput
}

export type BankAccountUpdateInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBankAccountsNestedInput
  pixTransactions?: Prisma.PixTransactionUpdateManyWithoutBankAccountNestedInput
}

export type BankAccountUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pixTransactions?: Prisma.PixTransactionUncheckedUpdateManyWithoutBankAccountNestedInput
}

export type BankAccountCreateManyInput = {
  id?: string
  userId: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BankAccountUpdateManyMutationInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankAccountUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankAccountBancoAgenciaContaCpfCnpjCompoundUniqueInput = {
  banco: string
  agencia: string
  conta: string
  cpfCnpj: string
}

export type BankAccountCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  banco?: Prisma.SortOrder
  agencia?: Prisma.SortOrder
  conta?: Prisma.SortOrder
  digito?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  tipoPessoa?: Prisma.SortOrder
  titular?: Prisma.SortOrder
  cpfCnpj?: Prisma.SortOrder
  ativa?: Prisma.SortOrder
  validada?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BankAccountMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  banco?: Prisma.SortOrder
  agencia?: Prisma.SortOrder
  conta?: Prisma.SortOrder
  digito?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  tipoPessoa?: Prisma.SortOrder
  titular?: Prisma.SortOrder
  cpfCnpj?: Prisma.SortOrder
  ativa?: Prisma.SortOrder
  validada?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BankAccountMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  banco?: Prisma.SortOrder
  agencia?: Prisma.SortOrder
  conta?: Prisma.SortOrder
  digito?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  tipoPessoa?: Prisma.SortOrder
  titular?: Prisma.SortOrder
  cpfCnpj?: Prisma.SortOrder
  ativa?: Prisma.SortOrder
  validada?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BankAccountScalarRelationFilter = {
  is?: Prisma.BankAccountWhereInput
  isNot?: Prisma.BankAccountWhereInput
}

export type BankAccountListRelationFilter = {
  every?: Prisma.BankAccountWhereInput
  some?: Prisma.BankAccountWhereInput
  none?: Prisma.BankAccountWhereInput
}

export type BankAccountOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
  unset?: boolean
}

export type EnumAccountTypeFieldUpdateOperationsInput = {
  set?: $Enums.AccountType
}

export type EnumPersonTypeFieldUpdateOperationsInput = {
  set?: $Enums.PersonType
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type BankAccountCreateNestedOneWithoutPixTransactionsInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedCreateWithoutPixTransactionsInput>
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutPixTransactionsInput
  connect?: Prisma.BankAccountWhereUniqueInput
}

export type BankAccountUpdateOneRequiredWithoutPixTransactionsNestedInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedCreateWithoutPixTransactionsInput>
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutPixTransactionsInput
  upsert?: Prisma.BankAccountUpsertWithoutPixTransactionsInput
  connect?: Prisma.BankAccountWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.BankAccountUpdateToOneWithWhereWithoutPixTransactionsInput, Prisma.BankAccountUpdateWithoutPixTransactionsInput>, Prisma.BankAccountUncheckedUpdateWithoutPixTransactionsInput>
}

export type BankAccountCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput> | Prisma.BankAccountCreateWithoutUserInput[] | Prisma.BankAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutUserInput | Prisma.BankAccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BankAccountCreateManyUserInputEnvelope
  connect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
}

export type BankAccountUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput> | Prisma.BankAccountCreateWithoutUserInput[] | Prisma.BankAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutUserInput | Prisma.BankAccountCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BankAccountCreateManyUserInputEnvelope
  connect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
}

export type BankAccountUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput> | Prisma.BankAccountCreateWithoutUserInput[] | Prisma.BankAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutUserInput | Prisma.BankAccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BankAccountUpsertWithWhereUniqueWithoutUserInput | Prisma.BankAccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BankAccountCreateManyUserInputEnvelope
  set?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  disconnect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  delete?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  connect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  update?: Prisma.BankAccountUpdateWithWhereUniqueWithoutUserInput | Prisma.BankAccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BankAccountUpdateManyWithWhereWithoutUserInput | Prisma.BankAccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BankAccountScalarWhereInput | Prisma.BankAccountScalarWhereInput[]
}

export type BankAccountUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput> | Prisma.BankAccountCreateWithoutUserInput[] | Prisma.BankAccountUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BankAccountCreateOrConnectWithoutUserInput | Prisma.BankAccountCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BankAccountUpsertWithWhereUniqueWithoutUserInput | Prisma.BankAccountUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BankAccountCreateManyUserInputEnvelope
  set?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  disconnect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  delete?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  connect?: Prisma.BankAccountWhereUniqueInput | Prisma.BankAccountWhereUniqueInput[]
  update?: Prisma.BankAccountUpdateWithWhereUniqueWithoutUserInput | Prisma.BankAccountUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BankAccountUpdateManyWithWhereWithoutUserInput | Prisma.BankAccountUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BankAccountScalarWhereInput | Prisma.BankAccountScalarWhereInput[]
}

export type BankAccountCreateWithoutPixTransactionsInput = {
  id?: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutBankAccountsInput
}

export type BankAccountUncheckedCreateWithoutPixTransactionsInput = {
  id?: string
  userId: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BankAccountCreateOrConnectWithoutPixTransactionsInput = {
  where: Prisma.BankAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.BankAccountCreateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedCreateWithoutPixTransactionsInput>
}

export type BankAccountUpsertWithoutPixTransactionsInput = {
  update: Prisma.XOR<Prisma.BankAccountUpdateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedUpdateWithoutPixTransactionsInput>
  create: Prisma.XOR<Prisma.BankAccountCreateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedCreateWithoutPixTransactionsInput>
  where?: Prisma.BankAccountWhereInput
}

export type BankAccountUpdateToOneWithWhereWithoutPixTransactionsInput = {
  where?: Prisma.BankAccountWhereInput
  data: Prisma.XOR<Prisma.BankAccountUpdateWithoutPixTransactionsInput, Prisma.BankAccountUncheckedUpdateWithoutPixTransactionsInput>
}

export type BankAccountUpdateWithoutPixTransactionsInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutBankAccountsNestedInput
}

export type BankAccountUncheckedUpdateWithoutPixTransactionsInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BankAccountCreateWithoutUserInput = {
  id?: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  pixTransactions?: Prisma.PixTransactionCreateNestedManyWithoutBankAccountInput
}

export type BankAccountUncheckedCreateWithoutUserInput = {
  id?: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  pixTransactions?: Prisma.PixTransactionUncheckedCreateNestedManyWithoutBankAccountInput
}

export type BankAccountCreateOrConnectWithoutUserInput = {
  where: Prisma.BankAccountWhereUniqueInput
  create: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput>
}

export type BankAccountCreateManyUserInputEnvelope = {
  data: Prisma.BankAccountCreateManyUserInput | Prisma.BankAccountCreateManyUserInput[]
}

export type BankAccountUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BankAccountWhereUniqueInput
  update: Prisma.XOR<Prisma.BankAccountUpdateWithoutUserInput, Prisma.BankAccountUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BankAccountCreateWithoutUserInput, Prisma.BankAccountUncheckedCreateWithoutUserInput>
}

export type BankAccountUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BankAccountWhereUniqueInput
  data: Prisma.XOR<Prisma.BankAccountUpdateWithoutUserInput, Prisma.BankAccountUncheckedUpdateWithoutUserInput>
}

export type BankAccountUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BankAccountScalarWhereInput
  data: Prisma.XOR<Prisma.BankAccountUpdateManyMutationInput, Prisma.BankAccountUncheckedUpdateManyWithoutUserInput>
}

export type BankAccountScalarWhereInput = {
  AND?: Prisma.BankAccountScalarWhereInput | Prisma.BankAccountScalarWhereInput[]
  OR?: Prisma.BankAccountScalarWhereInput[]
  NOT?: Prisma.BankAccountScalarWhereInput | Prisma.BankAccountScalarWhereInput[]
  id?: Prisma.StringFilter<"BankAccount"> | string
  userId?: Prisma.StringFilter<"BankAccount"> | string
  banco?: Prisma.StringFilter<"BankAccount"> | string
  agencia?: Prisma.StringFilter<"BankAccount"> | string
  conta?: Prisma.StringFilter<"BankAccount"> | string
  digito?: Prisma.StringNullableFilter<"BankAccount"> | string | null
  tipo?: Prisma.EnumAccountTypeFilter<"BankAccount"> | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFilter<"BankAccount"> | $Enums.PersonType
  titular?: Prisma.StringFilter<"BankAccount"> | string
  cpfCnpj?: Prisma.StringFilter<"BankAccount"> | string
  ativa?: Prisma.BoolFilter<"BankAccount"> | boolean
  validada?: Prisma.BoolFilter<"BankAccount"> | boolean
  createdAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BankAccount"> | Date | string
}

export type BankAccountCreateManyUserInput = {
  id?: string
  banco: string
  agencia: string
  conta: string
  digito?: string | null
  tipo: $Enums.AccountType
  tipoPessoa: $Enums.PersonType
  titular: string
  cpfCnpj: string
  ativa?: boolean
  validada?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BankAccountUpdateWithoutUserInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pixTransactions?: Prisma.PixTransactionUpdateManyWithoutBankAccountNestedInput
}

export type BankAccountUncheckedUpdateWithoutUserInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pixTransactions?: Prisma.PixTransactionUncheckedUpdateManyWithoutBankAccountNestedInput
}

export type BankAccountUncheckedUpdateManyWithoutUserInput = {
  banco?: Prisma.StringFieldUpdateOperationsInput | string
  agencia?: Prisma.StringFieldUpdateOperationsInput | string
  conta?: Prisma.StringFieldUpdateOperationsInput | string
  digito?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
  tipoPessoa?: Prisma.EnumPersonTypeFieldUpdateOperationsInput | $Enums.PersonType
  titular?: Prisma.StringFieldUpdateOperationsInput | string
  cpfCnpj?: Prisma.StringFieldUpdateOperationsInput | string
  ativa?: Prisma.BoolFieldUpdateOperationsInput | boolean
  validada?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type BankAccountCountOutputType
 */

export type BankAccountCountOutputType = {
  pixTransactions: number
}

export type BankAccountCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pixTransactions?: boolean | BankAccountCountOutputTypeCountPixTransactionsArgs
}

/**
 * BankAccountCountOutputType without action
 */
export type BankAccountCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccountCountOutputType
   */
  select?: Prisma.BankAccountCountOutputTypeSelect<ExtArgs> | null
}

/**
 * BankAccountCountOutputType without action
 */
export type BankAccountCountOutputTypeCountPixTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PixTransactionWhereInput
}


export type BankAccountSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  banco?: boolean
  agencia?: boolean
  conta?: boolean
  digito?: boolean
  tipo?: boolean
  tipoPessoa?: boolean
  titular?: boolean
  cpfCnpj?: boolean
  ativa?: boolean
  validada?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  pixTransactions?: boolean | Prisma.BankAccount$pixTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.BankAccountCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["bankAccount"]>



export type BankAccountSelectScalar = {
  id?: boolean
  userId?: boolean
  banco?: boolean
  agencia?: boolean
  conta?: boolean
  digito?: boolean
  tipo?: boolean
  tipoPessoa?: boolean
  titular?: boolean
  cpfCnpj?: boolean
  ativa?: boolean
  validada?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BankAccountOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "banco" | "agencia" | "conta" | "digito" | "tipo" | "tipoPessoa" | "titular" | "cpfCnpj" | "ativa" | "validada" | "createdAt" | "updatedAt", ExtArgs["result"]["bankAccount"]>
export type BankAccountInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  pixTransactions?: boolean | Prisma.BankAccount$pixTransactionsArgs<ExtArgs>
  _count?: boolean | Prisma.BankAccountCountOutputTypeDefaultArgs<ExtArgs>
}

export type $BankAccountPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BankAccount"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    pixTransactions: Prisma.$PixTransactionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    banco: string
    agencia: string
    conta: string
    digito: string | null
    tipo: $Enums.AccountType
    tipoPessoa: $Enums.PersonType
    titular: string
    cpfCnpj: string
    ativa: boolean
    validada: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["bankAccount"]>
  composites: {}
}

export type BankAccountGetPayload<S extends boolean | null | undefined | BankAccountDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BankAccountPayload, S>

export type BankAccountCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BankAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BankAccountCountAggregateInputType | true
  }

export interface BankAccountDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankAccount'], meta: { name: 'BankAccount' } }
  /**
   * Find zero or one BankAccount that matches the filter.
   * @param {BankAccountFindUniqueArgs} args - Arguments to find a BankAccount
   * @example
   * // Get one BankAccount
   * const bankAccount = await prisma.bankAccount.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BankAccountFindUniqueArgs>(args: Prisma.SelectSubset<T, BankAccountFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BankAccount that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BankAccountFindUniqueOrThrowArgs} args - Arguments to find a BankAccount
   * @example
   * // Get one BankAccount
   * const bankAccount = await prisma.bankAccount.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BankAccountFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BankAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankAccount that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountFindFirstArgs} args - Arguments to find a BankAccount
   * @example
   * // Get one BankAccount
   * const bankAccount = await prisma.bankAccount.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BankAccountFindFirstArgs>(args?: Prisma.SelectSubset<T, BankAccountFindFirstArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BankAccount that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountFindFirstOrThrowArgs} args - Arguments to find a BankAccount
   * @example
   * // Get one BankAccount
   * const bankAccount = await prisma.bankAccount.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BankAccountFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BankAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BankAccounts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BankAccounts
   * const bankAccounts = await prisma.bankAccount.findMany()
   * 
   * // Get first 10 BankAccounts
   * const bankAccounts = await prisma.bankAccount.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const bankAccountWithIdOnly = await prisma.bankAccount.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BankAccountFindManyArgs>(args?: Prisma.SelectSubset<T, BankAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BankAccount.
   * @param {BankAccountCreateArgs} args - Arguments to create a BankAccount.
   * @example
   * // Create one BankAccount
   * const BankAccount = await prisma.bankAccount.create({
   *   data: {
   *     // ... data to create a BankAccount
   *   }
   * })
   * 
   */
  create<T extends BankAccountCreateArgs>(args: Prisma.SelectSubset<T, BankAccountCreateArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BankAccounts.
   * @param {BankAccountCreateManyArgs} args - Arguments to create many BankAccounts.
   * @example
   * // Create many BankAccounts
   * const bankAccount = await prisma.bankAccount.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BankAccountCreateManyArgs>(args?: Prisma.SelectSubset<T, BankAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a BankAccount.
   * @param {BankAccountDeleteArgs} args - Arguments to delete one BankAccount.
   * @example
   * // Delete one BankAccount
   * const BankAccount = await prisma.bankAccount.delete({
   *   where: {
   *     // ... filter to delete one BankAccount
   *   }
   * })
   * 
   */
  delete<T extends BankAccountDeleteArgs>(args: Prisma.SelectSubset<T, BankAccountDeleteArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BankAccount.
   * @param {BankAccountUpdateArgs} args - Arguments to update one BankAccount.
   * @example
   * // Update one BankAccount
   * const bankAccount = await prisma.bankAccount.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BankAccountUpdateArgs>(args: Prisma.SelectSubset<T, BankAccountUpdateArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BankAccounts.
   * @param {BankAccountDeleteManyArgs} args - Arguments to filter BankAccounts to delete.
   * @example
   * // Delete a few BankAccounts
   * const { count } = await prisma.bankAccount.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BankAccountDeleteManyArgs>(args?: Prisma.SelectSubset<T, BankAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BankAccounts
   * const bankAccount = await prisma.bankAccount.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BankAccountUpdateManyArgs>(args: Prisma.SelectSubset<T, BankAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one BankAccount.
   * @param {BankAccountUpsertArgs} args - Arguments to update or create a BankAccount.
   * @example
   * // Update or create a BankAccount
   * const bankAccount = await prisma.bankAccount.upsert({
   *   create: {
   *     // ... data to create a BankAccount
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BankAccount we want to update
   *   }
   * })
   */
  upsert<T extends BankAccountUpsertArgs>(args: Prisma.SelectSubset<T, BankAccountUpsertArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BankAccounts that matches the filter.
   * @param {BankAccountFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const bankAccount = await prisma.bankAccount.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.BankAccountFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a BankAccount.
   * @param {BankAccountAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const bankAccount = await prisma.bankAccount.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.BankAccountAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of BankAccounts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountCountArgs} args - Arguments to filter BankAccounts to count.
   * @example
   * // Count the number of BankAccounts
   * const count = await prisma.bankAccount.count({
   *   where: {
   *     // ... the filter for the BankAccounts we want to count
   *   }
   * })
  **/
  count<T extends BankAccountCountArgs>(
    args?: Prisma.Subset<T, BankAccountCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BankAccountCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BankAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BankAccountAggregateArgs>(args: Prisma.Subset<T, BankAccountAggregateArgs>): Prisma.PrismaPromise<GetBankAccountAggregateType<T>>

  /**
   * Group by BankAccount.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BankAccountGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BankAccountGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BankAccountGroupByArgs['orderBy'] }
      : { orderBy?: BankAccountGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BankAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BankAccount model
 */
readonly fields: BankAccountFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BankAccount.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BankAccountClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  pixTransactions<T extends Prisma.BankAccount$pixTransactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BankAccount$pixTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BankAccount model
 */
export interface BankAccountFieldRefs {
  readonly id: Prisma.FieldRef<"BankAccount", 'String'>
  readonly userId: Prisma.FieldRef<"BankAccount", 'String'>
  readonly banco: Prisma.FieldRef<"BankAccount", 'String'>
  readonly agencia: Prisma.FieldRef<"BankAccount", 'String'>
  readonly conta: Prisma.FieldRef<"BankAccount", 'String'>
  readonly digito: Prisma.FieldRef<"BankAccount", 'String'>
  readonly tipo: Prisma.FieldRef<"BankAccount", 'AccountType'>
  readonly tipoPessoa: Prisma.FieldRef<"BankAccount", 'PersonType'>
  readonly titular: Prisma.FieldRef<"BankAccount", 'String'>
  readonly cpfCnpj: Prisma.FieldRef<"BankAccount", 'String'>
  readonly ativa: Prisma.FieldRef<"BankAccount", 'Boolean'>
  readonly validada: Prisma.FieldRef<"BankAccount", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"BankAccount", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"BankAccount", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BankAccount findUnique
 */
export type BankAccountFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter, which BankAccount to fetch.
   */
  where: Prisma.BankAccountWhereUniqueInput
}

/**
 * BankAccount findUniqueOrThrow
 */
export type BankAccountFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter, which BankAccount to fetch.
   */
  where: Prisma.BankAccountWhereUniqueInput
}

/**
 * BankAccount findFirst
 */
export type BankAccountFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter, which BankAccount to fetch.
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankAccounts to fetch.
   */
  orderBy?: Prisma.BankAccountOrderByWithRelationInput | Prisma.BankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankAccounts.
   */
  cursor?: Prisma.BankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankAccounts.
   */
  distinct?: Prisma.BankAccountScalarFieldEnum | Prisma.BankAccountScalarFieldEnum[]
}

/**
 * BankAccount findFirstOrThrow
 */
export type BankAccountFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter, which BankAccount to fetch.
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankAccounts to fetch.
   */
  orderBy?: Prisma.BankAccountOrderByWithRelationInput | Prisma.BankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BankAccounts.
   */
  cursor?: Prisma.BankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankAccounts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BankAccounts.
   */
  distinct?: Prisma.BankAccountScalarFieldEnum | Prisma.BankAccountScalarFieldEnum[]
}

/**
 * BankAccount findMany
 */
export type BankAccountFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter, which BankAccounts to fetch.
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BankAccounts to fetch.
   */
  orderBy?: Prisma.BankAccountOrderByWithRelationInput | Prisma.BankAccountOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BankAccounts.
   */
  cursor?: Prisma.BankAccountWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BankAccounts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BankAccounts.
   */
  skip?: number
  distinct?: Prisma.BankAccountScalarFieldEnum | Prisma.BankAccountScalarFieldEnum[]
}

/**
 * BankAccount create
 */
export type BankAccountCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * The data needed to create a BankAccount.
   */
  data: Prisma.XOR<Prisma.BankAccountCreateInput, Prisma.BankAccountUncheckedCreateInput>
}

/**
 * BankAccount createMany
 */
export type BankAccountCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BankAccounts.
   */
  data: Prisma.BankAccountCreateManyInput | Prisma.BankAccountCreateManyInput[]
}

/**
 * BankAccount update
 */
export type BankAccountUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * The data needed to update a BankAccount.
   */
  data: Prisma.XOR<Prisma.BankAccountUpdateInput, Prisma.BankAccountUncheckedUpdateInput>
  /**
   * Choose, which BankAccount to update.
   */
  where: Prisma.BankAccountWhereUniqueInput
}

/**
 * BankAccount updateMany
 */
export type BankAccountUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BankAccounts.
   */
  data: Prisma.XOR<Prisma.BankAccountUpdateManyMutationInput, Prisma.BankAccountUncheckedUpdateManyInput>
  /**
   * Filter which BankAccounts to update
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * Limit how many BankAccounts to update.
   */
  limit?: number
}

/**
 * BankAccount upsert
 */
export type BankAccountUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * The filter to search for the BankAccount to update in case it exists.
   */
  where: Prisma.BankAccountWhereUniqueInput
  /**
   * In case the BankAccount found by the `where` argument doesn't exist, create a new BankAccount with this data.
   */
  create: Prisma.XOR<Prisma.BankAccountCreateInput, Prisma.BankAccountUncheckedCreateInput>
  /**
   * In case the BankAccount was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BankAccountUpdateInput, Prisma.BankAccountUncheckedUpdateInput>
}

/**
 * BankAccount delete
 */
export type BankAccountDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
  /**
   * Filter which BankAccount to delete.
   */
  where: Prisma.BankAccountWhereUniqueInput
}

/**
 * BankAccount deleteMany
 */
export type BankAccountDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BankAccounts to delete
   */
  where?: Prisma.BankAccountWhereInput
  /**
   * Limit how many BankAccounts to delete.
   */
  limit?: number
}

/**
 * BankAccount findRaw
 */
export type BankAccountFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * BankAccount aggregateRaw
 */
export type BankAccountAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * BankAccount.pixTransactions
 */
export type BankAccount$pixTransactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  where?: Prisma.PixTransactionWhereInput
  orderBy?: Prisma.PixTransactionOrderByWithRelationInput | Prisma.PixTransactionOrderByWithRelationInput[]
  cursor?: Prisma.PixTransactionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PixTransactionScalarFieldEnum | Prisma.PixTransactionScalarFieldEnum[]
}

/**
 * BankAccount without action
 */
export type BankAccountDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BankAccount
   */
  select?: Prisma.BankAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BankAccount
   */
  omit?: Prisma.BankAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BankAccountInclude<ExtArgs> | null
}
