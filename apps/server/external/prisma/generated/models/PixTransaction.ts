
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PixTransaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PixTransaction
 * 
 */
export type PixTransactionModel = runtime.Types.Result.DefaultSelection<Prisma.$PixTransactionPayload>

export type AggregatePixTransaction = {
  _count: PixTransactionCountAggregateOutputType | null
  _avg: PixTransactionAvgAggregateOutputType | null
  _sum: PixTransactionSumAggregateOutputType | null
  _min: PixTransactionMinAggregateOutputType | null
  _max: PixTransactionMaxAggregateOutputType | null
}

export type PixTransactionAvgAggregateOutputType = {
  amount: number | null
}

export type PixTransactionSumAggregateOutputType = {
  amount: number | null
}

export type PixTransactionMinAggregateOutputType = {
  id: string | null
  amount: number | null
  description: string | null
  status: $Enums.PixStatus | null
  recipientName: string | null
  recipientPixKey: string | null
  createdAt: Date | null
  bankAccountId: string | null
}

export type PixTransactionMaxAggregateOutputType = {
  id: string | null
  amount: number | null
  description: string | null
  status: $Enums.PixStatus | null
  recipientName: string | null
  recipientPixKey: string | null
  createdAt: Date | null
  bankAccountId: string | null
}

export type PixTransactionCountAggregateOutputType = {
  id: number
  amount: number
  description: number
  status: number
  recipientName: number
  recipientPixKey: number
  createdAt: number
  bankAccountId: number
  _all: number
}


export type PixTransactionAvgAggregateInputType = {
  amount?: true
}

export type PixTransactionSumAggregateInputType = {
  amount?: true
}

export type PixTransactionMinAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  status?: true
  recipientName?: true
  recipientPixKey?: true
  createdAt?: true
  bankAccountId?: true
}

export type PixTransactionMaxAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  status?: true
  recipientName?: true
  recipientPixKey?: true
  createdAt?: true
  bankAccountId?: true
}

export type PixTransactionCountAggregateInputType = {
  id?: true
  amount?: true
  description?: true
  status?: true
  recipientName?: true
  recipientPixKey?: true
  createdAt?: true
  bankAccountId?: true
  _all?: true
}

export type PixTransactionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PixTransaction to aggregate.
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PixTransactions to fetch.
   */
  orderBy?: Prisma.PixTransactionOrderByWithRelationInput | Prisma.PixTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PixTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PixTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PixTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PixTransactions
  **/
  _count?: true | PixTransactionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PixTransactionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PixTransactionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PixTransactionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PixTransactionMaxAggregateInputType
}

export type GetPixTransactionAggregateType<T extends PixTransactionAggregateArgs> = {
      [P in keyof T & keyof AggregatePixTransaction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePixTransaction[P]>
    : Prisma.GetScalarType<T[P], AggregatePixTransaction[P]>
}




export type PixTransactionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PixTransactionWhereInput
  orderBy?: Prisma.PixTransactionOrderByWithAggregationInput | Prisma.PixTransactionOrderByWithAggregationInput[]
  by: Prisma.PixTransactionScalarFieldEnum[] | Prisma.PixTransactionScalarFieldEnum
  having?: Prisma.PixTransactionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PixTransactionCountAggregateInputType | true
  _avg?: PixTransactionAvgAggregateInputType
  _sum?: PixTransactionSumAggregateInputType
  _min?: PixTransactionMinAggregateInputType
  _max?: PixTransactionMaxAggregateInputType
}

export type PixTransactionGroupByOutputType = {
  id: string
  amount: number
  description: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt: Date
  bankAccountId: string
  _count: PixTransactionCountAggregateOutputType | null
  _avg: PixTransactionAvgAggregateOutputType | null
  _sum: PixTransactionSumAggregateOutputType | null
  _min: PixTransactionMinAggregateOutputType | null
  _max: PixTransactionMaxAggregateOutputType | null
}

type GetPixTransactionGroupByPayload<T extends PixTransactionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PixTransactionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PixTransactionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PixTransactionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PixTransactionGroupByOutputType[P]>
      }
    >
  >



export type PixTransactionWhereInput = {
  AND?: Prisma.PixTransactionWhereInput | Prisma.PixTransactionWhereInput[]
  OR?: Prisma.PixTransactionWhereInput[]
  NOT?: Prisma.PixTransactionWhereInput | Prisma.PixTransactionWhereInput[]
  id?: Prisma.StringFilter<"PixTransaction"> | string
  amount?: Prisma.FloatFilter<"PixTransaction"> | number
  description?: Prisma.StringNullableFilter<"PixTransaction"> | string | null
  status?: Prisma.EnumPixStatusFilter<"PixTransaction"> | $Enums.PixStatus
  recipientName?: Prisma.StringFilter<"PixTransaction"> | string
  recipientPixKey?: Prisma.StringFilter<"PixTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"PixTransaction"> | Date | string
  bankAccountId?: Prisma.StringFilter<"PixTransaction"> | string
  bankAccount?: Prisma.XOR<Prisma.BankAccountScalarRelationFilter, Prisma.BankAccountWhereInput>
}

export type PixTransactionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  recipientPixKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  bankAccountId?: Prisma.SortOrder
  bankAccount?: Prisma.BankAccountOrderByWithRelationInput
}

export type PixTransactionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PixTransactionWhereInput | Prisma.PixTransactionWhereInput[]
  OR?: Prisma.PixTransactionWhereInput[]
  NOT?: Prisma.PixTransactionWhereInput | Prisma.PixTransactionWhereInput[]
  amount?: Prisma.FloatFilter<"PixTransaction"> | number
  description?: Prisma.StringNullableFilter<"PixTransaction"> | string | null
  status?: Prisma.EnumPixStatusFilter<"PixTransaction"> | $Enums.PixStatus
  recipientName?: Prisma.StringFilter<"PixTransaction"> | string
  recipientPixKey?: Prisma.StringFilter<"PixTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"PixTransaction"> | Date | string
  bankAccountId?: Prisma.StringFilter<"PixTransaction"> | string
  bankAccount?: Prisma.XOR<Prisma.BankAccountScalarRelationFilter, Prisma.BankAccountWhereInput>
}, "id">

export type PixTransactionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  recipientPixKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  bankAccountId?: Prisma.SortOrder
  _count?: Prisma.PixTransactionCountOrderByAggregateInput
  _avg?: Prisma.PixTransactionAvgOrderByAggregateInput
  _max?: Prisma.PixTransactionMaxOrderByAggregateInput
  _min?: Prisma.PixTransactionMinOrderByAggregateInput
  _sum?: Prisma.PixTransactionSumOrderByAggregateInput
}

export type PixTransactionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PixTransactionScalarWhereWithAggregatesInput | Prisma.PixTransactionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PixTransactionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PixTransactionScalarWhereWithAggregatesInput | Prisma.PixTransactionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PixTransaction"> | string
  amount?: Prisma.FloatWithAggregatesFilter<"PixTransaction"> | number
  description?: Prisma.StringNullableWithAggregatesFilter<"PixTransaction"> | string | null
  status?: Prisma.EnumPixStatusWithAggregatesFilter<"PixTransaction"> | $Enums.PixStatus
  recipientName?: Prisma.StringWithAggregatesFilter<"PixTransaction"> | string
  recipientPixKey?: Prisma.StringWithAggregatesFilter<"PixTransaction"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PixTransaction"> | Date | string
  bankAccountId?: Prisma.StringWithAggregatesFilter<"PixTransaction"> | string
}

export type PixTransactionCreateInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
  bankAccount: Prisma.BankAccountCreateNestedOneWithoutPixTransactionsInput
}

export type PixTransactionUncheckedCreateInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
  bankAccountId: string
}

export type PixTransactionUpdateInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bankAccount?: Prisma.BankAccountUpdateOneRequiredWithoutPixTransactionsNestedInput
}

export type PixTransactionUncheckedUpdateInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bankAccountId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PixTransactionCreateManyInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
  bankAccountId: string
}

export type PixTransactionUpdateManyMutationInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PixTransactionUncheckedUpdateManyInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bankAccountId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PixTransactionListRelationFilter = {
  every?: Prisma.PixTransactionWhereInput
  some?: Prisma.PixTransactionWhereInput
  none?: Prisma.PixTransactionWhereInput
}

export type PixTransactionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PixTransactionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  recipientPixKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  bankAccountId?: Prisma.SortOrder
}

export type PixTransactionAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PixTransactionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  recipientPixKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  bankAccountId?: Prisma.SortOrder
}

export type PixTransactionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  recipientPixKey?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  bankAccountId?: Prisma.SortOrder
}

export type PixTransactionSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type PixTransactionCreateNestedManyWithoutBankAccountInput = {
  create?: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput> | Prisma.PixTransactionCreateWithoutBankAccountInput[] | Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput[]
  connectOrCreate?: Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput | Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput[]
  createMany?: Prisma.PixTransactionCreateManyBankAccountInputEnvelope
  connect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
}

export type PixTransactionUncheckedCreateNestedManyWithoutBankAccountInput = {
  create?: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput> | Prisma.PixTransactionCreateWithoutBankAccountInput[] | Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput[]
  connectOrCreate?: Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput | Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput[]
  createMany?: Prisma.PixTransactionCreateManyBankAccountInputEnvelope
  connect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
}

export type PixTransactionUpdateManyWithoutBankAccountNestedInput = {
  create?: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput> | Prisma.PixTransactionCreateWithoutBankAccountInput[] | Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput[]
  connectOrCreate?: Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput | Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput[]
  upsert?: Prisma.PixTransactionUpsertWithWhereUniqueWithoutBankAccountInput | Prisma.PixTransactionUpsertWithWhereUniqueWithoutBankAccountInput[]
  createMany?: Prisma.PixTransactionCreateManyBankAccountInputEnvelope
  set?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  disconnect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  delete?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  connect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  update?: Prisma.PixTransactionUpdateWithWhereUniqueWithoutBankAccountInput | Prisma.PixTransactionUpdateWithWhereUniqueWithoutBankAccountInput[]
  updateMany?: Prisma.PixTransactionUpdateManyWithWhereWithoutBankAccountInput | Prisma.PixTransactionUpdateManyWithWhereWithoutBankAccountInput[]
  deleteMany?: Prisma.PixTransactionScalarWhereInput | Prisma.PixTransactionScalarWhereInput[]
}

export type PixTransactionUncheckedUpdateManyWithoutBankAccountNestedInput = {
  create?: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput> | Prisma.PixTransactionCreateWithoutBankAccountInput[] | Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput[]
  connectOrCreate?: Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput | Prisma.PixTransactionCreateOrConnectWithoutBankAccountInput[]
  upsert?: Prisma.PixTransactionUpsertWithWhereUniqueWithoutBankAccountInput | Prisma.PixTransactionUpsertWithWhereUniqueWithoutBankAccountInput[]
  createMany?: Prisma.PixTransactionCreateManyBankAccountInputEnvelope
  set?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  disconnect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  delete?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  connect?: Prisma.PixTransactionWhereUniqueInput | Prisma.PixTransactionWhereUniqueInput[]
  update?: Prisma.PixTransactionUpdateWithWhereUniqueWithoutBankAccountInput | Prisma.PixTransactionUpdateWithWhereUniqueWithoutBankAccountInput[]
  updateMany?: Prisma.PixTransactionUpdateManyWithWhereWithoutBankAccountInput | Prisma.PixTransactionUpdateManyWithWhereWithoutBankAccountInput[]
  deleteMany?: Prisma.PixTransactionScalarWhereInput | Prisma.PixTransactionScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumPixStatusFieldUpdateOperationsInput = {
  set?: $Enums.PixStatus
}

export type PixTransactionCreateWithoutBankAccountInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
}

export type PixTransactionUncheckedCreateWithoutBankAccountInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
}

export type PixTransactionCreateOrConnectWithoutBankAccountInput = {
  where: Prisma.PixTransactionWhereUniqueInput
  create: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput>
}

export type PixTransactionCreateManyBankAccountInputEnvelope = {
  data: Prisma.PixTransactionCreateManyBankAccountInput | Prisma.PixTransactionCreateManyBankAccountInput[]
}

export type PixTransactionUpsertWithWhereUniqueWithoutBankAccountInput = {
  where: Prisma.PixTransactionWhereUniqueInput
  update: Prisma.XOR<Prisma.PixTransactionUpdateWithoutBankAccountInput, Prisma.PixTransactionUncheckedUpdateWithoutBankAccountInput>
  create: Prisma.XOR<Prisma.PixTransactionCreateWithoutBankAccountInput, Prisma.PixTransactionUncheckedCreateWithoutBankAccountInput>
}

export type PixTransactionUpdateWithWhereUniqueWithoutBankAccountInput = {
  where: Prisma.PixTransactionWhereUniqueInput
  data: Prisma.XOR<Prisma.PixTransactionUpdateWithoutBankAccountInput, Prisma.PixTransactionUncheckedUpdateWithoutBankAccountInput>
}

export type PixTransactionUpdateManyWithWhereWithoutBankAccountInput = {
  where: Prisma.PixTransactionScalarWhereInput
  data: Prisma.XOR<Prisma.PixTransactionUpdateManyMutationInput, Prisma.PixTransactionUncheckedUpdateManyWithoutBankAccountInput>
}

export type PixTransactionScalarWhereInput = {
  AND?: Prisma.PixTransactionScalarWhereInput | Prisma.PixTransactionScalarWhereInput[]
  OR?: Prisma.PixTransactionScalarWhereInput[]
  NOT?: Prisma.PixTransactionScalarWhereInput | Prisma.PixTransactionScalarWhereInput[]
  id?: Prisma.StringFilter<"PixTransaction"> | string
  amount?: Prisma.FloatFilter<"PixTransaction"> | number
  description?: Prisma.StringNullableFilter<"PixTransaction"> | string | null
  status?: Prisma.EnumPixStatusFilter<"PixTransaction"> | $Enums.PixStatus
  recipientName?: Prisma.StringFilter<"PixTransaction"> | string
  recipientPixKey?: Prisma.StringFilter<"PixTransaction"> | string
  createdAt?: Prisma.DateTimeFilter<"PixTransaction"> | Date | string
  bankAccountId?: Prisma.StringFilter<"PixTransaction"> | string
}

export type PixTransactionCreateManyBankAccountInput = {
  id?: string
  amount: number
  description?: string | null
  status: $Enums.PixStatus
  recipientName: string
  recipientPixKey: string
  createdAt?: Date | string
}

export type PixTransactionUpdateWithoutBankAccountInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PixTransactionUncheckedUpdateWithoutBankAccountInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PixTransactionUncheckedUpdateManyWithoutBankAccountInput = {
  amount?: Prisma.FloatFieldUpdateOperationsInput | number
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumPixStatusFieldUpdateOperationsInput | $Enums.PixStatus
  recipientName?: Prisma.StringFieldUpdateOperationsInput | string
  recipientPixKey?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PixTransactionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  amount?: boolean
  description?: boolean
  status?: boolean
  recipientName?: boolean
  recipientPixKey?: boolean
  createdAt?: boolean
  bankAccountId?: boolean
  bankAccount?: boolean | Prisma.BankAccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pixTransaction"]>



export type PixTransactionSelectScalar = {
  id?: boolean
  amount?: boolean
  description?: boolean
  status?: boolean
  recipientName?: boolean
  recipientPixKey?: boolean
  createdAt?: boolean
  bankAccountId?: boolean
}

export type PixTransactionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "amount" | "description" | "status" | "recipientName" | "recipientPixKey" | "createdAt" | "bankAccountId", ExtArgs["result"]["pixTransaction"]>
export type PixTransactionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bankAccount?: boolean | Prisma.BankAccountDefaultArgs<ExtArgs>
}

export type $PixTransactionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PixTransaction"
  objects: {
    bankAccount: Prisma.$BankAccountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    amount: number
    description: string | null
    status: $Enums.PixStatus
    recipientName: string
    recipientPixKey: string
    createdAt: Date
    bankAccountId: string
  }, ExtArgs["result"]["pixTransaction"]>
  composites: {}
}

export type PixTransactionGetPayload<S extends boolean | null | undefined | PixTransactionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload, S>

export type PixTransactionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PixTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PixTransactionCountAggregateInputType | true
  }

export interface PixTransactionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PixTransaction'], meta: { name: 'PixTransaction' } }
  /**
   * Find zero or one PixTransaction that matches the filter.
   * @param {PixTransactionFindUniqueArgs} args - Arguments to find a PixTransaction
   * @example
   * // Get one PixTransaction
   * const pixTransaction = await prisma.pixTransaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PixTransactionFindUniqueArgs>(args: Prisma.SelectSubset<T, PixTransactionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PixTransaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PixTransactionFindUniqueOrThrowArgs} args - Arguments to find a PixTransaction
   * @example
   * // Get one PixTransaction
   * const pixTransaction = await prisma.pixTransaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PixTransactionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PixTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PixTransaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionFindFirstArgs} args - Arguments to find a PixTransaction
   * @example
   * // Get one PixTransaction
   * const pixTransaction = await prisma.pixTransaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PixTransactionFindFirstArgs>(args?: Prisma.SelectSubset<T, PixTransactionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PixTransaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionFindFirstOrThrowArgs} args - Arguments to find a PixTransaction
   * @example
   * // Get one PixTransaction
   * const pixTransaction = await prisma.pixTransaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PixTransactionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PixTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PixTransactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PixTransactions
   * const pixTransactions = await prisma.pixTransaction.findMany()
   * 
   * // Get first 10 PixTransactions
   * const pixTransactions = await prisma.pixTransaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pixTransactionWithIdOnly = await prisma.pixTransaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PixTransactionFindManyArgs>(args?: Prisma.SelectSubset<T, PixTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PixTransaction.
   * @param {PixTransactionCreateArgs} args - Arguments to create a PixTransaction.
   * @example
   * // Create one PixTransaction
   * const PixTransaction = await prisma.pixTransaction.create({
   *   data: {
   *     // ... data to create a PixTransaction
   *   }
   * })
   * 
   */
  create<T extends PixTransactionCreateArgs>(args: Prisma.SelectSubset<T, PixTransactionCreateArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PixTransactions.
   * @param {PixTransactionCreateManyArgs} args - Arguments to create many PixTransactions.
   * @example
   * // Create many PixTransactions
   * const pixTransaction = await prisma.pixTransaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PixTransactionCreateManyArgs>(args?: Prisma.SelectSubset<T, PixTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a PixTransaction.
   * @param {PixTransactionDeleteArgs} args - Arguments to delete one PixTransaction.
   * @example
   * // Delete one PixTransaction
   * const PixTransaction = await prisma.pixTransaction.delete({
   *   where: {
   *     // ... filter to delete one PixTransaction
   *   }
   * })
   * 
   */
  delete<T extends PixTransactionDeleteArgs>(args: Prisma.SelectSubset<T, PixTransactionDeleteArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PixTransaction.
   * @param {PixTransactionUpdateArgs} args - Arguments to update one PixTransaction.
   * @example
   * // Update one PixTransaction
   * const pixTransaction = await prisma.pixTransaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PixTransactionUpdateArgs>(args: Prisma.SelectSubset<T, PixTransactionUpdateArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PixTransactions.
   * @param {PixTransactionDeleteManyArgs} args - Arguments to filter PixTransactions to delete.
   * @example
   * // Delete a few PixTransactions
   * const { count } = await prisma.pixTransaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PixTransactionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PixTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PixTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PixTransactions
   * const pixTransaction = await prisma.pixTransaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PixTransactionUpdateManyArgs>(args: Prisma.SelectSubset<T, PixTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one PixTransaction.
   * @param {PixTransactionUpsertArgs} args - Arguments to update or create a PixTransaction.
   * @example
   * // Update or create a PixTransaction
   * const pixTransaction = await prisma.pixTransaction.upsert({
   *   create: {
   *     // ... data to create a PixTransaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PixTransaction we want to update
   *   }
   * })
   */
  upsert<T extends PixTransactionUpsertArgs>(args: Prisma.SelectSubset<T, PixTransactionUpsertArgs<ExtArgs>>): Prisma.Prisma__PixTransactionClient<runtime.Types.Result.GetResult<Prisma.$PixTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PixTransactions that matches the filter.
   * @param {PixTransactionFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const pixTransaction = await prisma.pixTransaction.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.PixTransactionFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a PixTransaction.
   * @param {PixTransactionAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const pixTransaction = await prisma.pixTransaction.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.PixTransactionAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of PixTransactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionCountArgs} args - Arguments to filter PixTransactions to count.
   * @example
   * // Count the number of PixTransactions
   * const count = await prisma.pixTransaction.count({
   *   where: {
   *     // ... the filter for the PixTransactions we want to count
   *   }
   * })
  **/
  count<T extends PixTransactionCountArgs>(
    args?: Prisma.Subset<T, PixTransactionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PixTransactionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PixTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PixTransactionAggregateArgs>(args: Prisma.Subset<T, PixTransactionAggregateArgs>): Prisma.PrismaPromise<GetPixTransactionAggregateType<T>>

  /**
   * Group by PixTransaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PixTransactionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PixTransactionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PixTransactionGroupByArgs['orderBy'] }
      : { orderBy?: PixTransactionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PixTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPixTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PixTransaction model
 */
readonly fields: PixTransactionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PixTransaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PixTransactionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  bankAccount<T extends Prisma.BankAccountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BankAccountDefaultArgs<ExtArgs>>): Prisma.Prisma__BankAccountClient<runtime.Types.Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PixTransaction model
 */
export interface PixTransactionFieldRefs {
  readonly id: Prisma.FieldRef<"PixTransaction", 'String'>
  readonly amount: Prisma.FieldRef<"PixTransaction", 'Float'>
  readonly description: Prisma.FieldRef<"PixTransaction", 'String'>
  readonly status: Prisma.FieldRef<"PixTransaction", 'PixStatus'>
  readonly recipientName: Prisma.FieldRef<"PixTransaction", 'String'>
  readonly recipientPixKey: Prisma.FieldRef<"PixTransaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"PixTransaction", 'DateTime'>
  readonly bankAccountId: Prisma.FieldRef<"PixTransaction", 'String'>
}
    

// Custom InputTypes
/**
 * PixTransaction findUnique
 */
export type PixTransactionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PixTransaction to fetch.
   */
  where: Prisma.PixTransactionWhereUniqueInput
}

/**
 * PixTransaction findUniqueOrThrow
 */
export type PixTransactionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PixTransaction to fetch.
   */
  where: Prisma.PixTransactionWhereUniqueInput
}

/**
 * PixTransaction findFirst
 */
export type PixTransactionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PixTransaction to fetch.
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PixTransactions to fetch.
   */
  orderBy?: Prisma.PixTransactionOrderByWithRelationInput | Prisma.PixTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PixTransactions.
   */
  cursor?: Prisma.PixTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PixTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PixTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PixTransactions.
   */
  distinct?: Prisma.PixTransactionScalarFieldEnum | Prisma.PixTransactionScalarFieldEnum[]
}

/**
 * PixTransaction findFirstOrThrow
 */
export type PixTransactionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PixTransaction to fetch.
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PixTransactions to fetch.
   */
  orderBy?: Prisma.PixTransactionOrderByWithRelationInput | Prisma.PixTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PixTransactions.
   */
  cursor?: Prisma.PixTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PixTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PixTransactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PixTransactions.
   */
  distinct?: Prisma.PixTransactionScalarFieldEnum | Prisma.PixTransactionScalarFieldEnum[]
}

/**
 * PixTransaction findMany
 */
export type PixTransactionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter, which PixTransactions to fetch.
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PixTransactions to fetch.
   */
  orderBy?: Prisma.PixTransactionOrderByWithRelationInput | Prisma.PixTransactionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PixTransactions.
   */
  cursor?: Prisma.PixTransactionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PixTransactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PixTransactions.
   */
  skip?: number
  distinct?: Prisma.PixTransactionScalarFieldEnum | Prisma.PixTransactionScalarFieldEnum[]
}

/**
 * PixTransaction create
 */
export type PixTransactionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * The data needed to create a PixTransaction.
   */
  data: Prisma.XOR<Prisma.PixTransactionCreateInput, Prisma.PixTransactionUncheckedCreateInput>
}

/**
 * PixTransaction createMany
 */
export type PixTransactionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PixTransactions.
   */
  data: Prisma.PixTransactionCreateManyInput | Prisma.PixTransactionCreateManyInput[]
}

/**
 * PixTransaction update
 */
export type PixTransactionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * The data needed to update a PixTransaction.
   */
  data: Prisma.XOR<Prisma.PixTransactionUpdateInput, Prisma.PixTransactionUncheckedUpdateInput>
  /**
   * Choose, which PixTransaction to update.
   */
  where: Prisma.PixTransactionWhereUniqueInput
}

/**
 * PixTransaction updateMany
 */
export type PixTransactionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PixTransactions.
   */
  data: Prisma.XOR<Prisma.PixTransactionUpdateManyMutationInput, Prisma.PixTransactionUncheckedUpdateManyInput>
  /**
   * Filter which PixTransactions to update
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * Limit how many PixTransactions to update.
   */
  limit?: number
}

/**
 * PixTransaction upsert
 */
export type PixTransactionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * The filter to search for the PixTransaction to update in case it exists.
   */
  where: Prisma.PixTransactionWhereUniqueInput
  /**
   * In case the PixTransaction found by the `where` argument doesn't exist, create a new PixTransaction with this data.
   */
  create: Prisma.XOR<Prisma.PixTransactionCreateInput, Prisma.PixTransactionUncheckedCreateInput>
  /**
   * In case the PixTransaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PixTransactionUpdateInput, Prisma.PixTransactionUncheckedUpdateInput>
}

/**
 * PixTransaction delete
 */
export type PixTransactionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
  /**
   * Filter which PixTransaction to delete.
   */
  where: Prisma.PixTransactionWhereUniqueInput
}

/**
 * PixTransaction deleteMany
 */
export type PixTransactionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PixTransactions to delete
   */
  where?: Prisma.PixTransactionWhereInput
  /**
   * Limit how many PixTransactions to delete.
   */
  limit?: number
}

/**
 * PixTransaction findRaw
 */
export type PixTransactionFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * PixTransaction aggregateRaw
 */
export type PixTransactionAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * PixTransaction without action
 */
export type PixTransactionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PixTransaction
   */
  select?: Prisma.PixTransactionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PixTransaction
   */
  omit?: Prisma.PixTransactionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PixTransactionInclude<ExtArgs> | null
}
